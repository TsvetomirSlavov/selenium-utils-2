{"name":"selenium-utils","tagline":"Takes the misery out of Selenium","body":"## Findr\r\n\r\n`Findr` is a simple yet very powerful utility class that helps to write tests in a \"wait-style\", without accessing WebDriverWait directly.\r\n\r\nThe API is slick, easy to use and helps to be DRY and concise. It's based on chained methods in order to expose a clear API, and uses function composition in order to create chains of conditions. This chain is then evaluated atomically inside a WebDriverWait, under the hood.\r\n\r\nEvaluation fails if the chain doesn't completely completes within a given timeout, and an exception is thrown.\r\n\r\nSimple example over Google search :\r\n\r\n```\r\n// get google\r\ndriver.get(\"http://www.google.com\");\r\n\r\n// perform the search\r\nnew Findr(driver)\t\t\t// create a Findr\r\n\t.elem(By.id(\"gbqfq\"))  // wait for the elem located by id \"gbqfq\"\r\n    .sendKeys(\"pojos on the web\", Keys.ENTER);  // type the query\r\n\r\n// check the results\r\nnew Findr(driver)\t\t\t// create Findr\r\n\t.elem(By.id(\"ires\"))\t// wait for elem by id\r\n    .elemList(By.cssSelector(\"h3.r\")) // wait for a list of elements\r\n    .at(0)\t\t\t\t\t// wait for 1st in the list\r\n    .elem(By.tagName(\"a\"))\t// wait for some <a> tag under the first list elem\r\n    .where(Findrs.textEquals(\"POJOs on the Web!: Woko\")) // wait for the text in the link\r\n    .eval();\t// evaluate the whole stuff ! will block until success, or timeout\r\n```\r\n\r\n### Built-in predicates\r\n\r\nThe `Findrs` class exposes a set of static factory methods that create `Predicate<WebElement>`s for the recurrent stuff, for example :\r\n\r\n* attrEquals(String attrName, String expectedValue)\r\n* hasClass(String className)\r\n* textEquals(final String expected)\r\n \r\nThose can be used directly in your findrs :\r\n\r\n```\r\nnew Findr(driver)\r\n\t.elem(By.cssSelector(\"div.my-class\"))\r\n\t.where(Findrs.attrEquals(\"my-attr\", \"my-value\"))\r\n\t.where(Findrs.textEquals(\"This is some content\"))\r\n\t.eval();\r\n``` \r\n\r\n\r\n### Error reporting\r\n\r\n`Findr` tries to report failures in condition chains by including a String-ified version of the path. Of course, the stack trace of the Timeout exception will tell where the evaluation failed.\r\n\r\nThere are also variants to `eval()` that accept a `failureMessage` argument.\r\n\r\n### Understanding failures\r\n\r\n`Findr` executes the various functions you compose as a \"back box\", and it's sometimes hard to understand where \r\nit went wrong in the conditions chain. In order to get insights about what's going on, you can \r\nset the sys prop `webtests.findr.verbose`, so that it outputs the logs (to stdout) when asserting the condition chain. \r\n\r\n## WebDriver init\r\n\r\nUse `DrivrBuilder` in order to create instances of `WebDriver`. The API can be used statically :\r\n\r\n```\r\n// create a simple Chrome Driver\r\nWebDriver driver = DriverBuildr\r\n\t.chrome()\r\n\t.setDriverPath(new File(\"/path/to/chromedriver\"))\r\n\t.build();\r\n```\r\n\r\nOr by defining system properties :\r\n\r\n```\r\nWebDriver = DriverBuildr.fromSysProps().build();\r\n```\r\n\r\nThe latter approach allows for more flexible builds. \r\n\r\n### System Properties\r\n\r\nHere is a list of all supported System Properties :\r\n\r\n<table>\r\n\t<thead>\r\n\t<tr>\r\n\t\t<th>property</th>\r\n\t\t<th>allowed values</th>\r\n\t\t<th>default</th>\r\n\t\t<th>comment</th>\r\n\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n    <tr>\r\n        <td colspan=\"4\"><em>General props</em></td>\r\n    </tr>\r\n\t<tr>\r\n\t\t<td>webtests.browser</td>\r\n\t\t<td>firefox,chrome</td>\r\n\t\t<td>firefox</td>\r\n\t\t<td></td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>webtests.locales</td>\r\n\t\t<td>en, fr, ...</td>\r\n\t\t<td></td>\r\n\t\t<td>Comma-separated list of locale(s) for the tests (browser language)</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>webtests.findr.timeout</td>\r\n\t\t<td>Any (reasonable) positive integer</td>\r\n\t\t<td>10</td>\r\n\t\t<td>The default Findr timeout in seconds</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>webtests.findr.verbose</td>\r\n\t\t<td>true,fase</td>\r\n\t\t<td>false</td>\r\n\t\t<td>log some infos about findr evaluation chains (helps debugging)</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>webtests.video.enabled</td>\r\n\t\t<td>true,false</td>\r\n\t\t<td>false</td>\r\n\t\t<td>enables video recording of failed tests</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>webtests.video.dir</td>\r\n\t\t<td>path to folder</td>\r\n\t\t<td>tmp dir</td>\r\n\t\t<td></td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>webtests.video.failures.only</td>\r\n\t\t<td>true,false</td>\r\n\t\t<td>true</td>\r\n\t\t<td>keep videos for failures only, or for all tests</td>\r\n\t</tr>\r\n\t<tr>\r\n    \t<td colspan=\"4\"><em>Chrome only</em></td>\r\n\t</tr>\r\n    <tr>\r\n        <td>webdriver.chrome.driver</td>\r\n        <td>path to driver exe</td>\r\n        <td></td>\r\n        <td>mandatory for Chrome</td>\r\n    </tr>\r\n\t</tbody>\r\n</table>\r\n\r\n## TestCase plumbing\r\n\r\nBase classes are included that manage the driver init/close and video stuff. If you use JUnit for example, you simply have to extend a base class :\r\n\r\n```\r\npublic class MyTest extends ManagedDriverJunit4TestBase {\r\n\r\n    @Test\r\n    public void testMe()  {\r\n    \tWebDriver d = getWebDriver();\r\n    \t...\r\n    }\r\n\r\n}\r\n```\r\n\r\nDoing so will allow you to run your test directly, and parameterize it using sys props. \r\n\r\n\r\n> There's also a `TestUtil` class that implements the lifecycle of a typical test. You can delegate to that one if you already extend a base class in your test.\r\n\r\n### Video recording\r\n\r\nWe have a very basic `ScreenRecordr` class that performs video capture on the host that runs the webdriver. It's activated by the TestCase plumbing, via sys props. \r\n\r\nIt's built on [Monte Media Library](http://www.randelshofer.ch/monte/), and is pure Java. It's been tested on a different platforms (mac, windows, linux), and even seems to work in headless/xvfb environments. \r\n\r\n## Using with Maven\r\n\r\nAdd the dependency to your pom :\r\n\r\n```\r\n<dependency>\r\n\t<groupId>com.pojosontheweb</groupId>\r\n    <artifactId>selenium-utils-core</artifactId>\r\n    <version>LATEST-SNAPSHOT</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```\r\n\r\nConfigure surefire :\r\n\r\n```\r\n<plugin>\r\n\t<groupId>org.apache.maven.plugins</groupId>\r\n    <artifactId>maven-surefire-plugin</artifactId>\r\n    <configuration>\r\n    \t<systemPropertyVariables>\r\n        \t<webtests.browser>${webtests.browser}</webtests.browser>\r\n            <webtests.video.enabled>${webtests.video.enabled}</webtests.video.enabled>\r\n            <webtests.video.dir>${project.build.directory}/webtests-videos</webtests.video.dir>\r\n            <webdriver.chrome.driver>${webdriver.chrome.driver}</webdriver.chrome.driver>\r\n        </systemPropertyVariables>\r\n    </configuration>\r\n</plugin>\r\n```\r\n\r\nInvoke maven :\r\n\r\n```\r\n$> mvn test\r\n```\r\n\r\nWith sys props :\r\n\r\n```\r\n$> mvn test -Dwebtests.browser=chrome -Dwebdriver.chrome.driver=/opt/chromedriver -Dwebtests.video.enabled=true\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}